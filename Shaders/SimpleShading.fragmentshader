#version 330 core
out vec3 FragColor;

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;

// constants for whole mesh
uniform sampler2D texture_diffuse1;
uniform vec4 light;	// light position (xyz) and light power (w)
uniform vec3 lightColour;
uniform float ambientlevel;

void main()
{    
	// Lighting properties
	float LightPower = light.w;

	// Material properties
	vec3 MaterialDiffuseColor = texture( texture_diffuse1, UV ).rgb;
	vec3 MaterialAmbientColor = vec3(ambientlevel,ambientlevel,ambientlevel) * MaterialDiffuseColor;

	// Distance to the light
	float distance = length( light.xyz - Position_worldspace );

	// Normal of the computed fragment, in camera space
	vec3 n = normalize( Normal_cameraspace );
	// Direction of the light (from the fragment to the light)
	vec3 l = normalize( LightDirection_cameraspace );
	// Cosine of the angle between the normal and the light direction, 
	// clamped above 0
	//  - light is at the vertical of the triangle -> 1
	//  - light is perpendicular to the triangle -> 0
	//  - light is behind the triangle -> 0
	float cosTheta = clamp( dot( n,l ), 0,1 );
	
	
	FragColor = 
		MaterialAmbientColor +
		// Diffuse : "color" of the object
		MaterialDiffuseColor * lightColour * LightPower * cosTheta / (distance*distance);
}